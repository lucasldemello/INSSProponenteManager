<div class="container p-4">
  <%= form_with(model: @proponent, url: proponents_path, data: { turbo: false }) do |form| %>
    <% if proponent.errors.any? %>
      <div id="error_explanation">
        <h2><%= pluralize(proponent.errors.count, "error") %> prohibited this proponent from being saved:</h2>

        <ul>
          <% proponent.errors.full_messages.each do |message| %>
            <li><%= message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <div class="row">
      <div class="form-group col">
        <%= form.label 'Nome' %>
        <%= form.text_field :name, class: 'form-control' %>
      </div>

      <div class="form-group col">
        <%= form.label :cpf %>
        <%= form.text_field :cpf, class: 'form-control' %>
      </div>

      <div class="form-group col">
        <%= form.label 'Data de Nascimento' %>
        <%= form.date_field :birthdate, class: 'form-control' %>
      </div>
    </div>

    <div class="row">
      <div class="form-group col">
        <%= form.label :salary, "Salário (R$)" %>
        <%= form.text_field :salary, id: 'salary-input', class: 'form-control', data: { input_mask: 'currency' } %>
      </div>

      <div class="form-group col">
        <%= form.label :inss_discount, "Alíquota INSS (R$)" %>
        <div class="input-group">
          <%= form.text_field :inss_discount, id: 'inss-discount-input', class: 'form-control', readonly: true, data: { input_mask: 'currency' } %>
        </div>
      </div>
    </div>

    <%= form.fields_for :address do |address_fields| %>
      <div class="nested-fields">
        <div class="row">
          <div class="form-group col">
            <%= address_fields.label :zip_code, 'CEP' %>
            <%= address_fields.text_field :zip_code, class: 'form-control' %>
          </div>

          <div class="form-group col">
            <%= address_fields.label :street, 'Rua' %>
            <%= address_fields.text_field :street, class: 'form-control' %>
          </div>

          <div class="form-group col">
            <%= address_fields.label :building_number, 'Número' %>
            <%= address_fields.text_field :building_number, class: 'form-control' %>
          </div>
        </div>

        <div class="row">
          <div class="form-group col">
            <%= address_fields.label :district, 'Bairro' %>
            <%= address_fields.text_field :district, class: 'form-control' %>
          </div>

          <div class="form-group col">
            <%= address_fields.label :city, 'Cidade' %>
            <%= address_fields.text_field :city, class: 'form-control' %>
          </div>

          <div class="form-group col">
            <%= address_fields.label :state, 'Estado' %>
            <%= address_fields.select :state, brazilian_states_options, { prompt: 'Selecione o estado' }, class: 'form-control' %>
          </div>

        </div>
      </div>
    <% end %>

    <% 3.times do %>
      <%= form.fields_for :proponent_phone do |proponent_phone_fields| %>
        <div class="nested-fields">
          <div class="row">
            <div class="form-group col-md-3">
              <%= proponent_phone_fields.label :phone_type, 'Tipo de telefone' %>
              <%= proponent_phone_fields.select :phone_type, phone_type_options, { prompt: 'Selecione o tipo' }, class: 'form-control' %>
            </div>

            <div class="form-group col-md-3">
              <%= proponent_phone_fields.label :phone_number, 'Número' %>
              <%= proponent_phone_fields.text_field :phone_number, class: 'form-control' %>
            </div>

            <div class="form-group col-md-6">
              <%= proponent_phone_fields.label :info, 'Observação' %>
              <%= proponent_phone_fields.text_field :info, class: 'form-control' %>
            </div>
          </div>
        </div>
      <% end %>
    <% end %>
    <%= form.submit 'Salvar', class: 'btn btn-primary mt-4' %>
  <% end %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const salaryInput = document.getElementById('salary-input');
    const inssDiscountInput = document.getElementById('inss-discount-input');

    // Função para formatar o valor do salário
    function formatSalaryValue() {
      let inputValue = salaryInput.value.replace(/\D/g, '').replace(/^0+/, '');
      if (inputValue.length === 0) {
        inputValue = '0';
      }

      const formattedValue = (parseInt(inputValue) / 100).toLocaleString('pt-BR', {
        style: 'currency',
        currency: 'BRL'
      });

      salaryInput.value = formattedValue;
    }

    // Função para enviar a requisição AJAX e atualizar o desconto do INSS
    function sendAjaxRequest() {
     let inputValue = salaryInput.value.replace(/[^\d,.]/g, '');
      inputValue = inputValue.replace(/\./g, ''); // Remover pontos
      const salaryValue = inputValue.replace(',', '.');

      if (!isNaN(salaryValue)) {
        alert('Calculando desconto do INSS...')
        fetch('/inss_discount/calculate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
          },
          body: JSON.stringify({ salary: salaryValue })
        })
        .then(response => response.json())
        .then(data => {
          inssDiscountInput.value = data.inss_discount;
        })
        .catch(error => {
          console.error('Erro ao calcular o desconto do INSS:', error);
        });
      }
    }

    // Adicionar evento input para formatar o valor do salário
    salaryInput.addEventListener('input', formatSalaryValue);

    // Adicionar evento change para enviar a requisição AJAX após a formatação
    salaryInput.addEventListener('change', sendAjaxRequest);

    const proponentForm = document.getElementById('proponent-form');
    proponentForm.addEventListener('submit', function(event) {
      const salaryValue = salaryInput.value.replace(/[^\d,.]/g, '');
      proponentForm.querySelector('#proponent_salary').value = salaryValue;
    });
  });

</script>
